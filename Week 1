//Find the Number Occurring Odd Number of Times
//Attempt 1:

class Solution {
public:
    int singleNumber(vector<int>& nums) {
        
    int ct;
    for(int i=0;i<size(nums);i++)
    {   
        ct=0;
        for(int j=0;j<size(nums);j++)
          {  
            if(nums[i]==nums[j])
           ct++;
        }
        if(ct==1)
        return nums[i];
       }
        return -1;
    }
};

//Using XOR

class Solution {
public:
    int singleNumber(vector<int>& nums) {
        
   int ans = 0;
    for(int i = 0 ; i < size(nums) ; i++)
    {
         ans ^= nums[i];
    }
    return ans;
    }
};

//check for majority element in a sorted array
#include<bits/stdc++.h>
using namespace std;
int binarySearch(int arr[], int l,int h, int x)
{
	if (h >= l)
	{
		int mid = (l+h)/2; 
		if (arr[mid] == x))
			return mid;
			
		else if (x > arr[mid])
			return binarySearch(arr, (mid + 1),h, x);
		else
			return binarySearch(arr, l,(mid - 1), x);
	}
	return -1;
}
bool isMajority(int arr[], int n, int x)
{
	int i = binarySearch(arr, 0, n - 1, x);
	if (i == -1)
		return false;
	if (((i + n / 2) <= (n - 1)) &&
	arr[i + n / 2] == x)
		return true;
	else
		return false;
}

int main()
{
	int arr[] = { 1, 2, 3, 3, 3, 3, 10 };
	int n = sizeof(arr) / sizeof(arr[0]);
	int x = 3;
	
	if (isMajority(arr, n, x))
		cout << x << " appears more than "
			<< n / 2 << " times in arr[]"
			<< endl;
	else
		cout << x << " does not appear more than"
			<< n / 2 << " times in arr[]" << endl;

	return 0;
}

//Find the maximum element in an array which is first increasing and then decreasing
class Solution {
public:
    int peakIndexInMountainArray(vector<int>& arr) {
       int low = 0;
        int high = arr.size()-1;
        while(low<=high){
            int mid = low+(high-low)/2;
            if(arr[mid-1]<arr[mid] && arr[mid]>arr[mid+1])
                return mid;
            if(arr[mid-1]<arr[mid] && arr[mid]<arr[mid+1])
                low = mid;
            else
                high=mid;
        }
        return -1;
    }
};
//Median of two sorted array
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
      int m = nums1.size(), n = nums2.size();
        if(m > n)   return findMedianSortedArrays(nums2, nums1);
        
        int low = 0, high = m;
        while(left <= right) {
            int i = low + (high - low) / 2;
            int j = (m + n) / 2 - i;
            
            int left1  = (i == 0)? INT_MIN : nums1[i - 1];
            int right1 = (i == m)? INT_MAX : nums1[i];
            int left2  = (j == 0)? INT_MIN : nums2[j - 1];
            int right2 = (j == n)? INT_MAX : nums2[j];
            
            if(left1 > right2) {
                high = i - 1;	// decrease i
            }
            else if(left2 > right1) {
                low = i + 1;	// increase i
            }
            else {
                if((m + n) & 1)
                    return (i == m)? (double)right2 : (j == n)? (double)right1 : (double)min(right1, right2);
                
                double l = (i == 0)? (double)left2 : (j == 0)? double(left1) : (double)max(left1, left2);
                double r = (i == m)? (double)right2 : (j == n)? (double)right1 : (double)min(right1, right2);
                return (l + r) / 2;
            }
        }
        
        return double(-1);
            
            
        
    }
};
