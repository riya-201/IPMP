//Find the Number Occurring Odd Number of Times
//Attempt 1:

class Solution {
public:
    int singleNumber(vector<int>& nums) {
        
    int ct;
    for(int i=0;i<size(nums);i++)
    {   
        ct=0;
        for(int j=0;j<size(nums);j++)
          {  
            if(nums[i]==nums[j])
           ct++;
        }
        if(ct==1)
        return nums[i];
       }
        return -1;
    }
};

//Using XOR

class Solution {
public:
    int singleNumber(vector<int>& nums) {
        
   int ans = 0;
    for(int i = 0 ; i < size(nums) ; i++)
    {
         ans ^= nums[i];
    }
    return ans;
    }
};

//check for majority element in a sorted array
#include<bits/stdc++.h>
using namespace std;
int binarySearch(int arr[], int l,int h, int x)
{
	if (h >= l)
	{
		int mid = (l+h)/2; 
		if (arr[mid] == x))
			return mid;
			
		else if (x > arr[mid])
			return binarySearch(arr, (mid + 1),h, x);
		else
			return binarySearch(arr, l,(mid - 1), x);
	}
	return -1;
}
bool isMajority(int arr[], int n, int x)
{
	int i = binarySearch(arr, 0, n - 1, x);
	if (i == -1)
		return false;
	if (((i + n / 2) <= (n - 1)) &&
	arr[i + n / 2] == x)
		return true;
	else
		return false;
}

int main()
{
	int arr[] = { 1, 2, 3, 3, 3, 3, 10 };
	int n = sizeof(arr) / sizeof(arr[0]);
	int x = 3;
	
	if (isMajority(arr, n, x))
		cout << x << " appears more than "
			<< n / 2 << " times in arr[]"
			<< endl;
	else
		cout << x << " does not appear more than"
			<< n / 2 << " times in arr[]" << endl;

	return 0;
}

