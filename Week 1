//Find the Number Occurring Odd Number of Times
//Attempt 1:

class Solution {
public:
    int singleNumber(vector<int>& nums) {
        
    int ct;
    for(int i=0;i<size(nums);i++)
    {   
        ct=0;
        for(int j=0;j<size(nums);j++)
          {  
            if(nums[i]==nums[j])
           ct++;
        }
        if(ct==1)
        return nums[i];
       }
        return -1;
    }
};

//Using XOR

class Solution {
public:
    int singleNumber(vector<int>& nums) {
        
   int ans = 0;
    for(int i = 0 ; i < size(nums) ; i++)
    {
         ans ^= nums[i];
    }
    return ans;
    
 //Increasing triplet subsequence
   bool increasingTriplet(vector<int>& nums) {
      if(size(nums)<3)
          return false;
        int c1=INT_MAX,c2=INT_MAX;
        for(int i :nums)
        {if (i<=c1)
         c1=i;
        else if(i<=c2)
            c2=i;
        else 
         return true;
        }
        return false;
    }
    //First missing positive
    int firstMissingPositive(vector<int>& nums) {
       int n=size(nums);
        for(int i=0;i<n;i++)
            while(nums[i]>0 && nums[i]<=n && nums[nums[i]-1]!=nums[i])
            swap(nums[i],nums[nums[i]-1]);
        
        for(int i=0;i<n;i++)
        {if(nums[i]!=i+1)
         return i+1;
        }
       return n+1; 
    }
    }
};

//check for majority element in a sorted array
#include<bits/stdc++.h>
using namespace std;
int binarySearch(int arr[], int l,int h, int x)
{
	if (h >= l)
	{
		int mid = (l+h)/2; 
		if (arr[mid] == x))
			return mid;
			
		else if (x > arr[mid])
			return binarySearch(arr, (mid + 1),h, x);
		else
			return binarySearch(arr, l,(mid - 1), x);
	}
	return -1;
}
bool isMajority(int arr[], int n, int x)
{
	int i = binarySearch(arr, 0, n - 1, x);
	if (i == -1)
		return false;
	if (((i + n / 2) <= (n - 1)) &&
	arr[i + n / 2] == x)
		return true;
	else
		return false;
}

int main()
{
	int arr[] = { 1, 2, 3, 3, 3, 3, 10 };
	int n = sizeof(arr) / sizeof(arr[0]);
	int x = 3;
	
	if (isMajority(arr, n, x))
		cout << x << " appears more than "
			<< n / 2 << " times in arr[]"
			<< endl;
	else
		cout << x << " does not appear more than"
			<< n / 2 << " times in arr[]" << endl;

	return 0;
}

//Find the maximum element in an array which is first increasing and then decreasing
class Solution {
public:
    int peakIndexInMountainArray(vector<int>& arr) {
       int low = 0;
        int high = arr.size()-1;
        while(low<=high){
            int mid = low+(high-low)/2;
            if(arr[mid-1]<arr[mid] && arr[mid]>arr[mid+1])
                return mid;
            if(arr[mid-1]<arr[mid] && arr[mid]<arr[mid+1])
                low = mid;
            else
                high=mid;
        }
        return -1;
    }
};
//Median of two sorted array
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
      int m = nums1.size(), n = nums2.size();
        if(m > n)   return findMedianSortedArrays(nums2, nums1);
        
        int low = 0, high = m;
        while(left <= right) {
            int i = low + (high - low) / 2;
            int j = (m + n) / 2 - i;
            
            int left1  = (i == 0)? INT_MIN : nums1[i - 1];
            int right1 = (i == m)? INT_MAX : nums1[i];
            int left2  = (j == 0)? INT_MIN : nums2[j - 1];
            int right2 = (j == n)? INT_MAX : nums2[j];
            
            if(left1 > right2) {
                high = i - 1;	// decrease i
            }
            else if(left2 > right1) {
                low = i + 1;	// increase i
            }
            else {
                if((m + n) & 1)
                    return (i == m)? (double)right2 : (j == n)? (double)right1 : (double)min(right1, right2);
                
                double l = (i == 0)? (double)left2 : (j == 0)? double(left1) : (double)max(left1, left2);
                double r = (i == m)? (double)right2 : (j == n)? (double)right1 : (double)min(right1, right2);
                return (l + r) / 2;
            }
        }
        
        return double(-1);
            
            
        
    }
};
//Longest Increasing Subsequence
 int lengthOfLIS(vector<int>& nums) {
        if(nums.size()==0)
            return 0;
        vector<int>::iterator m=nums.begin();
        for(int& val:nums)
        {auto it=lower_bound(nums.begin(), m, val);
         *it=val;
        if(it==m)
         m++;
    }
    
    return m - nums.begin();
    }
    //next palindrome
    #include<iostream>

using namespace std;

int main(){
	int t;
	cin>>t;
	while(t--){
		string s1,num;
		cin>>s1;
		num=s1;
		int len=s1.length();
		for(int i=0;i<len/2;i++){
			s1[len-i-1]=s1[i];
		}
		if(s1>num){
			cout<<s1<<endl;
		}else{
			int mid=(len-1)/2;
			for(int i=mid;i>=0;i--){
				if(s1[i]!='9'){
					s1[i]=(s1[i]+1);
					break;
				}else{
					s1[i]='0';
				}
			}
			for(int i=0;i<len/2;i++){
				s1[len-i-1]=s1[i];
			}
			if(s1[0]=='0'){
				s1+='1';
				s1[0]='1';
			}
			cout<<s1<<endl;
		}
	}
	return 0;
}
